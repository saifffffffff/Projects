#include <vector>
#include <iostream>
#include <string>
#include <fstream>

using namespace std;

const string BankFile = "Bank_files/Bank.txt";
const string DelimiterBetweenFileInfo = "$//$";

enum enAtmChoices { eQuickWithdraw = 1, eNormalWithdraw, eDeposit, eCheckBalance, eLogOut };

namespace String {
    int Len(string word) {
        int counter = 0;
        while (true) {
            if (word[counter] == '\0')
                break;
            counter++;
        }
        return counter;
    }
    string TrimLeft(string text) {
        for (short i = 0; i < text.length(); i++) {
            if (text[i] != ' ')
                return text.substr(i);
        }
        return "";
    }
    string TrimRight(string text) {
        for (short i = text.size() - 1; i >= 0; i--)
            if (text[i] != ' ')
                return text.substr(0, i + 1);
        return "";
    }
    string Trim(string text) {
        return TrimRight(TrimLeft(text));
    }
    vector<string> SpliteString(string text, string delimiter = " ") {
        string word;
        short pos;
        vector<string> SplitedString;
        while ((pos = text.find(delimiter)) != string::npos) {
            word = text.substr(0, pos);
            if (word != "")
                SplitedString.push_back(word);
            text.erase(0, pos + delimiter.length());
        }
        if (text != "")
            SplitedString.push_back(text);
        return SplitedString;
    }
}

namespace Read {
    string ReadString(string message) {
        string str = "";
        while (str.empty()) {
            cout << message;
            getline(cin >> ws, str);
        }
        return String::Trim(str);
    }
    char ReadChar(string message) {
        char c;
        string input = "";
        while (true) {
            cout << message;
            getline(cin >> ws, input);
            if (String::Len(input) == 1) {
                c = input[0];
                break;
            }
        }
        return c;
    }
    int ReadIntInRange(int From, int To, string message, string OutOfRangeMessage = "", string InvalidInputMessage = "") {
        int num;
        cout << message;
        cin >> num;
        while (num > To || num < From || cin.fail()) {
            if (cin.fail())
                cout << InvalidInputMessage;
            else
                cout << OutOfRangeMessage;
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cin >> num;
        }
        return num;
    }
    double ReadDoubleInRange(double From, double To, string message, string OutOfRangeMessage = "", string InvalidInputMessage = "") {
        double num;
        cout << message;
        cin >> num;
        while (num > To || num < From || cin.fail()) {
            if (cin.fail())
                cout << InvalidInputMessage;
            else
                cout << OutOfRangeMessage;
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cin >> num;
        }
        return num;
    }
    double ReadMultipleOf(string message, int factor) {
        double num = 0;
        while (true) {
            num = ReadDoubleInRange(0, INT_MAX, message);
            if (((int)num % factor) == 0)
                break;
        }
        return num;
    }
}

struct stClient {
    string name;
    string pinCode;
    string phoneNumber;
    string accountNumber;
    bool MarkForDelete = false;
    double accountBalance;
};
stClient CurrentClient;

void LogIn();
void ShowAtmMainMenuScreen();

// Client's data operations
stClient ConvertLineToClientRecord(string line) {
    stClient client;
    vector<string> ClientInfo = String::SpliteString(line, DelimiterBetweenFileInfo);
    client.accountNumber = ClientInfo.at(0);
    client.pinCode = ClientInfo.at(1);
    client.name = ClientInfo.at(2);
    client.phoneNumber = ClientInfo.at(3);
    client.accountBalance = stod(ClientInfo.at(4));
    return client;
}

string ConvertClientRecordToLine(const stClient& client, string seperator = "#//#") {
    string ClientRecord = "";
    ClientRecord += client.accountNumber + seperator;
    ClientRecord += client.pinCode + seperator;
    ClientRecord += client.name + seperator;
    ClientRecord += client.phoneNumber + seperator;
    ClientRecord += to_string(client.accountBalance);
    return ClientRecord;
}

vector<stClient> LoadClientdDataFromFileToVector(string FileName) {
    vector<stClient> vClients;
    fstream file(FileName, ios::in);
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            vClients.push_back(ConvertLineToClientRecord(line));
        }
    }
    file.close();
    return vClients;
}

void LoadClientDataFromVectorToFile(string FileName, vector<stClient> vClients) {
    fstream file(FileName, ios::out);
    if (file.is_open()) {
        for (const stClient& client : vClients) {
            file << ConvertClientRecordToLine(client, DelimiterBetweenFileInfo) << endl;
        }
    }
    file.close();
}

bool FindClientByAccountNumberAndPinCode(string AccountNumber, string PinCode, stClient& client) {
    vector<stClient> vClients = LoadClientdDataFromFileToVector(BankFile);
    for (const stClient& C : vClients) {
        if ((C.accountNumber == AccountNumber)) {
            if(C.pinCode == PinCode)
            {
                client = C;
                return true;
            }
            return false;
        }
    }
    return false;
}

bool LoadCurrentClient(string AccountNumber, string PinCode) {
    if (FindClientByAccountNumberAndPinCode(AccountNumber, PinCode, CurrentClient))
        return true;
    return false;
}

void UpdateClientInFile() {
    vector<stClient> vClients = LoadClientdDataFromFileToVector(BankFile);
    for (stClient& client : vClients) {
        if (CurrentClient.accountNumber == client.accountNumber)
            client = CurrentClient;
    }
    LoadClientDataFromVectorToFile(BankFile, vClients);
}

// Balance Operations
void UpdateBalance(double Amount) {
    CurrentClient.accountBalance += Amount;
}

void Withdraw(double Amount) {
    UpdateBalance((Amount *= -1));
    UpdateClientInFile();
}

void Deposit(double Amount) {
    UpdateBalance(Amount);
    UpdateClientInFile();
}

// ATM Screens
bool PerformTransaction() {
    char WantToPerform = Read::ReadChar("Are you sure you want to perform this transaction (y/n) ? ");
    return (tolower(WantToPerform) == 'y');
}

void PerformQuickWithdrawChoice(short choice) {
    if (choice == 9)
        return;

    short QuickWithdrawAmount[] = { 20, 50, 100, 200, 400, 600, 800, 1000 };
    short Amount = QuickWithdrawAmount[choice - 1];

    if (Amount > CurrentClient.accountBalance) {
        cout << "The amount exceeds your balance, make another choice.";
        return;
    }

    if (PerformTransaction()) {
        Withdraw(Amount);
        cout << "Done Successfully. New balance is : " << CurrentClient.accountBalance << endl << endl;
    }
}

void PerformNormalWithDrawChoice() {
    double Amount = Read::ReadMultipleOf("Enter an amount multiple of 5's : ", 5);
    if (Amount > CurrentClient.accountBalance) {
        cout << "The amount exceeds your balance, make another choice.";
        return;
    }

    if (PerformTransaction()) {
        Withdraw(Amount);
        cout << "Done Successfully. New balance is : " << CurrentClient.accountBalance << endl << endl;
    }
}

void QuickWithdrawScreen() {
    cout << "- - - - - - - - - - - - - - -" << endl;
    cout << "\tQuick Withdraw" << endl;
    cout << "- - - - - - - - - - - - - - -" << endl;
    cout << "[1] 20 \t\t" << "[2] 50" << endl;
    cout << "[3] 100\t\t" << "[4] 200" << endl;
    cout << "[5] 400\t\t" << "[6] 600" << endl;
    cout << "[7] 800\t\t" << "[8] 1000" << endl;
    cout << "[9] Exit" << endl;
    cout << "- - - - - - - - - - - - - - -" << endl;
    cout << "Your Balance is " << CurrentClient.accountBalance << endl << endl;

    PerformQuickWithdrawChoice(( Read::ReadIntInRange(1, 9, "Enter What You Want To Do [1 - 9] : ", "Please Enter Number Between [1 - 9] : ", "Please Enter A Valid Number : ")));
}

void NormalWithdrawScreen() {
    cout << "- - - - - - - - - - - - - - -" << endl;
    cout << "\tNormal Withdraw" << endl;
    cout << "- - - - - - - - - - - - - - -" << endl << endl;
    PerformNormalWithDrawChoice();
}

void DepositScreen() {
    cout << "- - - - - - - - - - - - - - -" << endl;
    cout << "\t\tDeposit" << endl;
    cout << "- - - - - - - - - - - - - - -" << endl << endl;
    double Amount = Read::ReadDoubleInRange(0, INT_MAX, "Please Enter A Deposit Amount : ", "Please Enter A Positive Amount : ", "Please Enter A Number : ");
    if (PerformTransaction()) {
        Deposit(Amount);
        cout << "Done Successfully. New Balance Is " << CurrentClient.accountBalance;
    }
}

void CheckBalanceScreen() {
    cout << "- - - - - - - - - - - - - - -" << endl;
    cout << "\tCheck Balance" << endl;
    cout << "- - - - - - - - - - - - - - -" << endl << endl;
    cout << "Your balance is : " << CurrentClient.accountBalance << endl;
}

void GoBackToAtmMainMenu() {
    cout << "\n\n\nPress any key to go back to main menu...";
    system("pause>0");
    ShowAtmMainMenuScreen();
}

void PerformAtmMainMenuChoice(enAtmChoices choice) {
    system("clear");
    switch (choice) {
    case eNormalWithdraw:
        NormalWithdrawScreen();
        GoBackToAtmMainMenu();
        break;
    case eQuickWithdraw:
        QuickWithdrawScreen();
        GoBackToAtmMainMenu();
        break;
    case eDeposit:
        DepositScreen();
        GoBackToAtmMainMenu();
        break;
    case eCheckBalance:
        CheckBalanceScreen();
        GoBackToAtmMainMenu();
        break;
    case eLogOut:
        CurrentClient = {};
        LogIn();
        break;
    }
}

void ShowAtmMainMenuScreen() {
    system("clear");
    cout << "- - - - - - - - - - - - -" << endl;
    cout << "\tAtm Screen" << endl;
    cout << "- - - - - - - - - - - - -" << endl;
    cout << "   [1] Quick Withdraw" << endl;
    cout << "   [2] Normal Withdraw" << endl;
    cout << "   [3] Deposit" << endl;
    cout << "   [4] Check Balance" << endl;
    cout << "   [5] log out" << endl;
    cout << "- - - - - - - - - - - - -" << endl;
    PerformAtmMainMenuChoice((enAtmChoices)Read::ReadIntInRange(1, 5, "Enter What You Want To Do [1 - 5] : ", "Please Enter Number Between [1 - 5] : ", "Please Enter A Valid Number : "));
}

void LogIn() {
    string AccountNumber, PinCode;
    bool LogInFailed = false;
    do {
        system("clear");
        cout << "- - - - - - - - - - - - - - -" << endl;
        cout << "- - - - Log in screen - - - -" << endl;
        cout << "- - - - - - - - - - - - - - -" << endl;
        if (LogInFailed)
            cout << "Invalid AccountNumber/PinCode." << endl;
        AccountNumber = Read::ReadString("Enter Account Number : ");
        PinCode = Read::ReadString("Enter Pin Code : ");
        LogInFailed = !LoadCurrentClient(AccountNumber, PinCode);
    } while (LogInFailed);
    ShowAtmMainMenuScreen();
}

int main() {
    srand((unsigned)time(NULL));
    LogIn();
    return 0;
}
